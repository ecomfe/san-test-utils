(window.webpackJsonp=window.webpackJsonp||[]).push([[107,48],{123:function(n,s){n.exports=' <div class="content markdown-content"><div class="markdown"><h1 id="trigger">trigger</h1> <hr/> <p>在该 <code>Wrapper</code> DOM 节点上触发一个事件。</p> <p><code>trigger</code> 带有一个可选的 <code>options</code> 对象。<code>options</code> 对象内的属性会被添加到事件上。</p> <ul> <li> <p><strong>参数</strong>：</p> <ul> <li><code>{string} eventType</code> 必填</li> <li><code>{Object} options</code> 可选</li> </ul> </li> <li> <p><strong>示例</strong>：</p> </li> </ul> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>attach<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'san-test-utils\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> sinon <span class="token keyword">from</span> <span class="token string">\'sinon\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">\'./foo\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> clickHandler <span class="token operator">=</span> sinon<span class="token punctuation">.</span><span class="token function">stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">attach</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span> clickHandler <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nwrapper<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nwrapper<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">button</span><span class="token operator">:</span> <span class="token number">0</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nwrapper<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">ctrlKey</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">expect</span><span class="token punctuation">(</span>clickHandler<span class="token punctuation">.</span>called<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <ul> <li>设置事件目标：</li> </ul> <p>在这背后，<code>trigger</code> 创建了一个 <code>Event</code> 对象并分发到其包裹器的元素上。</p> <p>我们没有机会编辑 <code>Event</code> 对象的 <code>target</code> 值，所以你无法在选项对象中设置 <code>target</code>。</p> <p>如果想在 <code>target</code> 中添加一个特性，你需要在调用 <code>trigger</code> 之前设置包裹器元素的那个值。你可以设置 <code>el</code> 属性来完成。</p> <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> input <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">\'input\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ninput<span class="token punctuation">.</span>el<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\ninput<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> </div></div> '},182:function(n,s,a){var p=a(1),t=a(123),o=a(51).default;n.exports=a(51),n.exports.default=p(o,t,[])},51:function(n,s,a){"use strict";a.r(s),function(n){a.d(s,"default",(function(){return e}));var p,t,o,c=a(0);class e extends c.a{inited(){n.hub&&n.hub.fire&&n.hub.fire("changed",{level:0})}}o={},(t="components")in(p=e)?Object.defineProperty(p,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):p[t]=o}.call(this,a(2))}}]);