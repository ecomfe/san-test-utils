(window.webpackJsonp=window.webpackJsonp||[]).push([[65,5],{154:function(n,s,a){var t=a(1),p=a(95),o=a(23).default;n.exports=a(23),n.exports.default=t(o,p,[])},23:function(n,s,a){"use strict";a.r(s),function(n){a.d(s,"default",(function(){return e}));var t,p,o,c=a(0);class e extends c.a{inited(){n.hub&&n.hub.fire&&n.hub.fire("changed",{level:0})}}o={},(p="components")in(t=e)?Object.defineProperty(t,p,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[p]=o}.call(this,a(2))},95:function(n,s){n.exports=' <div class="content markdown-content"><div class="markdown"><h1 id="rendertostring()">renderToString()</h1> <hr/> <ul> <li> <p><strong>参数</strong>：</p> <ul> <li><code>{Component} component</code></li> <li><code>{Object} options</code> <ul> <li><code>{Object|Array&lt;string&gt;} stubs</code></li> <li><code>{Object} data</code></li> </ul> </li> </ul> </li> <li> <p><strong>返回值</strong>：<code>{string}</code></p> </li> <li> <p><strong>选项</strong>：移步 <a href="/san-test-utils/attachOptions/index/">挂载选项</a></p> </li> <li> <p><strong>用法</strong>：</p> </li> </ul> <p>将一个组件渲染为 HTML。</p> <p><code>renderToString</code> 在底层使用 <a href="https://github.com/baidu/san-ssr" target="_blank"><code>san-ssr</code></a> 将一个组件渲染为静态的 HTML。</p> <h4 id="%E4%B8%8D%E4%BD%BF%E7%94%A8options%E9%80%89%E9%A1%B9">不使用options选项</h4> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>renderToString<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'san-test-utils/dist/san-test-utils.ssr\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">\'./foo\'</span><span class="token punctuation">;</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'Foo\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'renders a div\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">renderToString</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">\'&lt;div>&lt;/div>\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h4 id="%E4%BD%BF%E7%94%A8options%E9%80%89%E9%A1%B9">使用options选项</h4> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>renderToString<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'san-test-utils/dist/san-test-utils.ssr\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">\'./foo\'</span><span class="token punctuation">;</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'Foo\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'renders a div\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">renderToString</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">\'red\'</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">\'red\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> </div></div> '}}]);