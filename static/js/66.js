(window.webpackJsonp=window.webpackJsonp||[]).push([[66,6],{155:function(n,s,a){var o=a(1),t=a(96),p=a(24).default;n.exports=a(24),n.exports.default=o(p,t,[])},24:function(n,s,a){"use strict";a.r(s),function(n){a.d(s,"default",(function(){return c}));var o,t,p,e=a(0);class c extends e.a{inited(){n.hub&&n.hub.fire&&n.hub.fire("changed",{level:0,children:[{level:3,title:"CSS 选择器",hash:"css-%E9%80%89%E6%8B%A9%E5%99%A8"},{level:3,title:"San 组件",hash:"san-%E7%BB%84%E4%BB%B6"},{level:3,title:"查找选项对象",hash:"%E6%9F%A5%E6%89%BE%E9%80%89%E9%A1%B9%E5%AF%B9%E8%B1%A1"}]})}}p={},(t="components")in(o=c)?Object.defineProperty(o,t,{value:p,enumerable:!0,configurable:!0,writable:!0}):o[t]=p}.call(this,a(2))},96:function(n,s){n.exports=' <div class="content markdown-content"><div class="markdown"><h1 id="%E9%80%89%E6%8B%A9%E5%99%A8">选择器</h1> <hr/> <p>很多方法的<strong>参数</strong>中都包含选择器。一个选择器可以是一个 CSS 选择器、一个 San 组件或是一个查找选项对象。</p> <h3 id="css-%E9%80%89%E6%8B%A9%E5%99%A8">CSS 选择器</h3> <p>挂载处理任何有效的 CSS 选择器：</p> <ul> <li>标签选择器 (<code>div</code>、<code>foo</code>、<code>bar</code>)</li> <li>类选择器 (<code>.foo</code>、<code>.bar</code>)</li> <li>特性选择器 (<code>[foo]</code>、<code>[foo=&quot;bar&quot;]</code>)</li> <li>id 选择器 (<code>#foo</code>、<code>#bar</code>)</li> <li>伪选择器 (<code>div:first-of-type</code>)</li> </ul> <p>你也可以结合使用：</p> <ul> <li>直接从属结合 (<code>div &gt; #bar &gt; .foo</code>)</li> <li>一般从属结合 (<code>div #bar .foo</code>)</li> <li>近邻兄弟选择器 (<code>div + .foo</code>)</li> <li>一般兄弟选择器 (<code>div ~ .foo</code>)</li> </ul> <h3 id="san-%E7%BB%84%E4%BB%B6">San 组件</h3> <p>San 组件也是有效的选择器。</p> <pre class="language-js"><code class="language-js"><span class="token comment">// Foo</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> san<span class="token punctuation">.</span><span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'fooComponent\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">\'&lt;div />\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>shallowAttach<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'san-test-utils\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">\'./foo\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallowAttach</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <blockquote> <p>注意：使用组件作为选择器<strong>参数</strong>时该组件必须有且唯一的name值。</p> </blockquote> <h3 id="%E6%9F%A5%E6%89%BE%E9%80%89%E9%A1%B9%E5%AF%B9%E8%B1%A1">查找选项对象</h3> <h4 id="ref">Ref</h4> <p>San Test Utils 允许通过一个查找选项对象在组件包裹器上根据 s-ref 选择元素。</p> <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> buttonWrapper <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token string">\'myButton\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbuttonWrapper<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> </div></div> '}}]);