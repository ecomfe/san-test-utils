(window.webpackJsonp=window.webpackJsonp||[]).push([[75,16],{13:function(n,s,a){"use strict";a.r(s),function(n){a.d(s,"default",(function(){return c}));var p,t,o,e=a(0);class c extends e.a{inited(){n.hub&&n.hub.fire&&n.hub.fire("changed",{level:0,children:[{level:3,title:"明白要测试的是什么",hash:"%E6%98%8E%E7%99%BD%E8%A6%81%E6%B5%8B%E8%AF%95%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88"},{level:3,title:"浅渲染",hash:"%E6%B5%85%E6%B8%B2%E6%9F%93"},{level:3,title:"断言触发的事件",hash:"%E6%96%AD%E8%A8%80%E8%A7%A6%E5%8F%91%E7%9A%84%E4%BA%8B%E4%BB%B6"},{level:3,title:"从子组件触发事件",hash:"%E4%BB%8E%E5%AD%90%E7%BB%84%E4%BB%B6%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6"},{level:3,title:"操作组件数据",hash:"%E6%93%8D%E4%BD%9C%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE"},{level:3,title:"数据注入",hash:"%E6%95%B0%E6%8D%AE%E6%B3%A8%E5%85%A5"},{level:3,title:"存根组件",hash:"%E5%AD%98%E6%A0%B9%E7%BB%84%E4%BB%B6"}]})}}o={},(t="components")in(p=c)?Object.defineProperty(p,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):p[t]=o}.call(this,a(2))},144:function(n,s,a){var p=a(1),t=a(85),o=a(13).default;n.exports=a(13),n.exports.default=p(o,t,[])},85:function(n,s){n.exports=' <div class="content markdown-content"><div class="markdown"><h1 id="%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7">常用技巧</h1> <h3 id="%E6%98%8E%E7%99%BD%E8%A6%81%E6%B5%8B%E8%AF%95%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88">明白要测试的是什么</h3> <p>对于 UI 组件来说，我们不推荐一味追求行级覆盖率，因为它会导致我们过分关注组件的内部实现细节，从而导致琐碎的测试。</p> <p>取而代之的是，我们推荐把测试撰写为断言你的组件的公共接口，并在一个黑盒内部处理它。一个简单的测试用例将会断言一些输入 (用户的交互或 data 的改变) 提供给某组件之后是否导致预期结果 (渲染结果或触发自定义事件)。</p> <p>比如，对于每次点击按钮都会将计数加一的 <code>Counter</code> 组件来说，其测试用例将会模拟点击并断言渲染结果会加 1。该测试并没有关注 <code>Counter</code> 如何递增数值，而只关注其输入和输出。</p> <p>该提议的好处在于，即便该组件的内部实现已经随时间发生了改变，只要你的组件的公共接口始终保持一致，测试就可以通过。</p> <p>这个话题的细节在 <a href="https://www.youtube.com/watch?v=OIpfWTThrK8" target="_blank">Matt O\'Connell 一份非常棒的演讲</a> 中有更多的讨论。</p> <h3 id="%E6%B5%85%E6%B8%B2%E6%9F%93">浅渲染</h3> <p>在测试用例中，我们通常希望专注在一个孤立的单元中测试组件，避免对其子组件的行为进行间接的断言。</p> <p>额外的，对于包含许多子组件的组件来说，整个渲染树可能会非常大。重复渲染所有的子组件可能会让我们的测试变慢。</p> <p>San Test Utils 允许你通过 shallowAttach 方法只挂载一个组件而不渲染其子组件 (即保留它们的存根)：</p> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>shallowAttach<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'san-test-utils\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallowAttach</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>\nwrapper<span class="token punctuation">.</span>vm<span class="token punctuation">;</span> <span class="token comment">// 挂载的 San 实例</span></code></pre> <h3 id="%E6%96%AD%E8%A8%80%E8%A7%A6%E5%8F%91%E7%9A%84%E4%BA%8B%E4%BB%B6">断言触发的事件</h3> <p>每个挂载的包裹器都会通过其背后的 San 实例自动记录所有被触发的事件。你可以用 <code>wrapper.fired()</code> 方法取回这些事件记录。</p> <pre class="language-js"><code class="language-js">wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nwrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/*\n`wrapper.fired()` 返回以下对象：\n{\n    foo: [[], [123]]\n}\n*/</span></code></pre> <p>同样的，也可以通过 <code>wrapper.dispatch()</code> 方法来触发消息的发送。</p> <pre class="language-js"><code class="language-js">wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nwrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/*\n`wrapper.dispatched()` 返回以下对象：\n{\n    foo: [[], [123]]\n}\n*/</span></code></pre> <p>然后你可以基于这些数据来设置断言：</p> <pre class="language-js"><code class="language-js"><span class="token comment">// 断言事件已经被触发</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">fired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 断言事件的数量</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">fired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foo<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 断言事件的有效数据</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">fired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n你也可以调用 wrapper<span class="token punctuation">.</span><span class="token function">firedByOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 获取一个按触发先后排序的事件数组。</code></pre> <h3 id="%E4%BB%8E%E5%AD%90%E7%BB%84%E4%BB%B6%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6">从子组件触发事件</h3> <p>你可以通过访问子组件实例来触发一个自定义事件</p> <p>待测试的组件</p> <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> childComponent <span class="token operator">=</span> san<span class="token punctuation">.</span><span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'childComponent\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div /></span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> parentComponent <span class="token operator">=</span> san<span class="token punctuation">.</span><span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'parentComponent\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        child<span class="token operator">-</span>component<span class="token operator">:</span> childComponent\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">emitted</span><span class="token operator">:</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">handleCustom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">\'emitted\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n        &lt;child-component on-custom="handleCustom" />\n        &lt;p s-if="emitted">&lt;div class="emitted" />&lt;/p>\n    &lt;/div></span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>测试代码</p> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>shallowAttach<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'san-test-utils\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> parentComponent <span class="token keyword">from</span> <span class="token string">\'./parentComponent\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> childComponent <span class="token keyword">from</span> <span class="token string">\'./childComponent\'</span><span class="token punctuation">;</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'parentComponent\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"contains class \'emitted!\' when custom event is emitted"</span><span class="token punctuation">,</span> <span class="token parameter">done</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">attach</span><span class="token punctuation">(</span>parentComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>childComponent<span class="token punctuation">)</span><span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token string">\'custom\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        san<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">\'&lt;div class="emitted">&lt;/div>\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <h3 id="%E6%93%8D%E4%BD%9C%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE">操作组件数据</h3> <p>你可以在包裹器上用 <code>setData</code> 方法直接操作组件状态：</p> <pre class="language-js"><code class="language-js">wrapper<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="%E6%95%B0%E6%8D%AE%E6%B3%A8%E5%85%A5">数据注入</h3> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>attach<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'san-test-utils\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">\'bar\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">123</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">attach</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    data\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="%E5%AD%98%E6%A0%B9%E7%BB%84%E4%BB%B6">存根组件</h3> <p>你可以使用 <code>stubs</code> 选项覆写已经注册的组件：</p> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>attach<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'san-test-utils\'</span><span class="token punctuation">;</span>\n\n<span class="token function">attach</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 将会把 globally-registered-component 解析为空的存根</span>\n  <span class="token literal-property property">stubs</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'globally-registered-component\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> </div></div> '}}]);