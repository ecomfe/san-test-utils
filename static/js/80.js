(window.webpackJsonp=window.webpackJsonp||[]).push([[80,21],{12:function(n,s,a){"use strict";a.r(s),function(n){a.d(s,"default",(function(){return e}));var t,p,o,c=a(0);class e extends c.a{inited(){n.hub&&n.hub.fire&&n.hub.fire("changed",{level:0,children:[{level:3,title:"挂载组件",hash:"%E6%8C%82%E8%BD%BD%E7%BB%84%E4%BB%B6"},{level:3,title:"测试组件渲染出来的 HTML",hash:"%E6%B5%8B%E8%AF%95%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93%E5%87%BA%E6%9D%A5%E7%9A%84-html"},{level:3,title:"模拟用户交互",hash:"%E6%A8%A1%E6%8B%9F%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92"},{level:3,title:"关于异步",hash:"%E5%85%B3%E4%BA%8E%E5%BC%82%E6%AD%A5"},{level:3,title:"下一步是什么",hash:"%E4%B8%8B%E4%B8%80%E6%AD%A5%E6%98%AF%E4%BB%80%E4%B9%88"}]})}}o={},(p="components")in(t=e)?Object.defineProperty(t,p,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[p]=o}.call(this,a(2))},143:function(n,s,a){var t=a(1),p=a(84),o=a(12).default;n.exports=a(12),n.exports.default=t(o,p,[])},84:function(n,s){n.exports=' <div class="content markdown-content"><div class="markdown"><h1 id="%E8%B5%B7%E6%AD%A5">起步</h1> <blockquote> <p>我们在 <a href="https://github.com/ecomfe/san-test-utils/tree/master/docs/demo/start" target="_blank">github</a> 上放有一个关于起步的示例工程。</p> </blockquote> <h1 id="%E5%AE%89%E8%A3%85">安装</h1> <p>快速尝鲜 San Test Utils 的办法就是克隆我们的 demo 仓库再加上基本的设置和依赖安装。</p> <pre class="language-js"><code class="language-js">$ git clone https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>ecomfe<span class="token operator">/</span>san<span class="token operator">-</span>test<span class="token operator">-</span>utils<span class="token punctuation">.</span>git\n$ cd docs<span class="token operator">/</span>demo<span class="token operator">/</span>start\n$ npm install</code></pre> <p>你会发现该工程包含了一个简单的组件 <code>counter.js</code>：</p> <pre class="language-js"><code class="language-js"><span class="token comment">// counter.js</span>\n\n<span class="token keyword">import</span> san <span class="token keyword">from</span> <span class="token string">\'san\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> san<span class="token punctuation">.</span><span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n        &lt;span class="count">&#123;&#123;count}}&lt;/span>\n        &lt;button on-click="increment">Increment&lt;/button>\n    &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n\n    <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'count\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">\'count\'</span><span class="token punctuation">,</span> <span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <h3 id="%E6%8C%82%E8%BD%BD%E7%BB%84%E4%BB%B6">挂载组件</h3> <p>San Test Utils 通过将它们隔离挂载，然后模拟必要的输入 (data、用户事件) 和对输出 (渲染结果、触发的自定义事件) 的断言来测试 San 组件。</p> <p>被挂载的组件会返回到一个 <a href="/san-test-utils/wrapper/index/">包裹器</a> 内，而包裹器会暴露很多封装、遍历和查询其内部的 San 组件实例的便捷的方法。</p> <p>你可以通过 <code>attach</code> 方法来创建包裹器。让我们创建一个名叫 <code>test.js</code> 的文件：</p> <pre class="language-js"><code class="language-js"><span class="token comment">// test.js</span>\n\n<span class="token comment">// 从测试实用工具集中导入 `attach()` 方法</span>\n<span class="token comment">// 同时导入你要测试的组件</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>attach<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'san-test-utils\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> counter <span class="token keyword">from</span> <span class="token string">\'./counter\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 现在挂载组件，你便得到了这个包裹器</span>\n<span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">attach</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 你可以通过 `wrapper.vm` 访问实际的 San 实例</span>\n<span class="token keyword">const</span> vm <span class="token operator">=</span> wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">;</span>\n\n<span class="token comment">// 我们对 San Test Utils 的探索也由此开始</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="%E6%B5%8B%E8%AF%95%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93%E5%87%BA%E6%9D%A5%E7%9A%84-html">测试组件渲染出来的 HTML</h3> <p>现在我们已经有了这个包裹器，我们能做的第一件事就是确认该组件渲染出来的 HTML 符合预期。</p> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>attach<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'san-test-utils\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> counter <span class="token keyword">from</span> <span class="token string">\'./counter\'</span><span class="token punctuation">;</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'Counter\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 现在挂载组件，你便得到了这个包裹器</span>\n    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">attach</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'renders the correct markup\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">\'&lt;span class="count">0&lt;/span>\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 也便于检查已存在的元素</span>\n    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'has a button\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>现在运行 <code>npm test</code> 进行测试。你应该看得到测试通过。</p> <h3 id="%E6%A8%A1%E6%8B%9F%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92">模拟用户交互</h3> <p>当用户点击按钮的时候，我们的计数器应该递增。为了模拟这一行为，我们首先需要通过 <code>wrapper.find()</code> 定位该按钮，此方法返回一个该按钮元素的包裹器。然后我们能够通过对该按钮包裹器调用 <code>.trigger()</code> 来模拟点击。</p> <pre class="language-js"><code class="language-js"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'button click should increment the count\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'count\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> button <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    button<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'count\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="%E5%85%B3%E4%BA%8E%E5%BC%82%E6%AD%A5">关于异步</h3> <p>San 会异步的将未生效的 DOM 更新批量应用，以避免因数据反复突变而导致的无谓的重渲染。这也是为什么在实践过程中我们经常在触发状态改变后用 San.nextTick 来等待 San 把实际的 DOM 更新做完的原因。</p> <p>在上面的例子中，当按钮被点击时，count会被同步+1，但对应的 DOM 实际并没有更新，如果想测试对应 DOM 是否正常渲染，可以使用如下写法：</p> <pre class="language-js"><code class="language-js"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'button click should increment the count\'</span><span class="token punctuation">,</span> <span class="token parameter">done</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'count\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> button <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    button<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'count\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    san<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">\'&lt;span class="count">1&lt;/span>\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="%E4%B8%8B%E4%B8%80%E6%AD%A5%E6%98%AF%E4%BB%80%E4%B9%88">下一步是什么</h3> <ul> <li><a href="/san-test-utils/guides/test-runner/">选择一个测试运行器</a> 以把 San Test Utils 集成到你的工程里。</li> <li>移步 <a href="/san-test-utils/guides/common-tips/">撰写测试的常见技巧</a> 以学习更多。</li> </ul> </div></div> '}}]);