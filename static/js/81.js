(window.webpackJsonp=window.webpackJsonp||[]).push([[81,22],{146:function(a,e,t){var s=t(1),n=t(87),l=t(15).default;a.exports=t(15),a.exports.default=s(l,n,[])},15:function(a,e,t){"use strict";t.r(e),function(a){t.d(e,"default",(function(){return p}));var s,n,l,o=t(0);class p extends o.a{inited(){a.hub&&a.hub.fire&&a.hub.fire("changed",{level:0,children:[{level:3,title:"浏览器环境",hash:"%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83"},{level:3,title:"测试单文件组件",hash:"%E6%B5%8B%E8%AF%95%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6"},{level:3,title:"相关资料",hash:"%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99"}]})}}l={},(n="components")in(s=p)?Object.defineProperty(s,n,{value:l,enumerable:!0,configurable:!0,writable:!0}):s[n]=l}.call(this,t(2))},87:function(a,e){a.exports=' <div class="content markdown-content"><div class="markdown"><h1 id="%E9%80%89%E6%8B%A9%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E8%BF%90%E8%A1%8C%E5%99%A8">选择一个测试运行器</h1> <p>测试运行器 (test runner) 就是运行测试的程序。</p> <p>主流的 JavaScript 测试运行器有很多，但 San Test Utils 都能够支持。它是与测试运行器无关的。</p> <p>当然在我们选用测试运行器的时候也需要考虑一些事项：功能集合、性能和对单文件组件预编译的支持等。在仔细比对现有的库之后，我们推荐其中的两个测试运行器：</p> <ul> <li> <p><a href="https://jestjs.io/docs/zh-Hans/getting-started" target="_blank">Jest</a> 是功能最全的测试运行器。它所需的配置是最少的，默认安装了 JSDOM，内置断言且命令行的用户体验非常好。不过你需要一个能够将单文件组件导入到测试中的预处理器。</p> </li> <li> <p><a href="https://github.com/zinserjan/mocha-webpack" target="_blank">mocha-webpack</a> 是一个 webpack + Mocha 的包裹器，同时包含了更顺畅的接口和侦听模式。</p> </li> </ul> <h3 id="%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83">浏览器环境</h3> <p>San Test Utils 依赖浏览器环境。技术上讲你可以将其运行在一个真实的浏览器，但是我们并不推荐，因为在不同的平台上都启动真实的浏览器是很复杂的。我们推荐取而代之的是用 <a href="https://github.com/tmpvar/jsdom" target="_blank">JSDOM</a> 在 Node 虚拟浏览器环境运行测试。</p> <p>Jest 测试运行器自动设置了 JSDOM。对于其它测试运行器来说，你可以在你的测试入口处使用 <a href="https://github.com/rstacruz/jsdom-global" target="_blank">jsdom-global</a> 手动设置 JSDOM。</p> <pre class="language-js"><code class="language-js">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev jsdom jsdom<span class="token operator">-</span>global</code></pre> <pre class="language-js"><code class="language-js"><span class="token comment">// 在测试的设置 / 入口中</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'jsdom-global\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> <h3 id="%E6%B5%8B%E8%AF%95%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6">测试单文件组件</h3> <p>San 的单文件组件在它们运行于 Node 或浏览器之前是需要预编译的。我们推荐使用 webpack。</p> <p>如何设置请移步下面的教程：</p> <ul> <li><a href="/san-test-utils/guides/mocha-demo/">用 Mocha 和 webpack 测试单文件组件</a>;</li> </ul> <h3 id="%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99">相关资料</h3> <ul> <li><a href="https://github.com/eddyerburgh/vue-unit-test-perf-comparison" target="_blank">测试运行器性能比拼</a></li> <li><a href="https://github.com/ecomfe/san-test-utils/tree/master/docs/demo/jest" target="_blank">使用 Jest 的示例工程</a></li> <li><a href="https://github.com/ecomfe/san-test-utils/tree/master/docs/demo/mocha" target="_blank">使用 Mocha 的示例工程</a></li> <li><a href="https://github.com/ecomfe/san-test-utils/tree/master/docs/demo/karma" target="_blank">使用 Karma 的示例工程</a></li> </ul> </div></div> '}}]);