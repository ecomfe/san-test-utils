!function(n){function s(s){for(var t,p,c=s[0],l=s[1],r=s[2],i=0,d=[];i<c.length;i++)p=c[i],Object.prototype.hasOwnProperty.call(e,p)&&e[p]&&d.push(e[p][0]),e[p]=0;for(t in l)Object.prototype.hasOwnProperty.call(l,t)&&(n[t]=l[t]);for(u&&u(s);d.length;)d.shift()();return o.push.apply(o,r||[]),a()}function a(){for(var n,s=0;s<o.length;s++){for(var a=o[s],t=!0,c=1;c<a.length;c++){var l=a[c];0!==e[l]&&(t=!1)}t&&(o.splice(s--,1),n=p(p.s=a[0]))}return n}var t={},e={2:0,62:0},o=[];function p(s){if(t[s])return t[s].exports;var a=t[s]={i:s,l:!1,exports:{}};return n[s].call(a.exports,a,a.exports,p),a.l=!0,a.exports}p.e=function(){return Promise.resolve()},p.m=n,p.c=t,p.d=function(n,s,a){p.o(n,s)||Object.defineProperty(n,s,{enumerable:!0,get:a})},p.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},p.t=function(n,s){if(1&s&&(n=p(n)),8&s)return n;if(4&s&&"object"==typeof n&&n&&n.__esModule)return n;var a=Object.create(null);if(p.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:n}),2&s&&"string"!=typeof n)for(var t in n)p.d(a,t,function(s){return n[s]}.bind(null,t));return a},p.n=function(n){var s=n&&n.__esModule?function(){return n.default}:function(){return n};return p.d(s,"a",s),s},p.o=function(n,s){return Object.prototype.hasOwnProperty.call(n,s)},p.p="/san-test-utils/";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=s,c=c.slice();for(var r=0;r<c.length;r++)s(c[r]);var u=l;o.push([157,0]),a()}({157:function(n,s,a){var t=a(1),e=a(98),o=a(26).default;n.exports=a(26),n.exports.default=t(o,e,[])},26:function(n,s,a){"use strict";a.r(s),function(n){a.d(s,"default",(function(){return c}));var t,e,o,p=a(0);class c extends p.a{inited(){n.hub&&n.hub.fire&&n.hub.fire("changed",{level:0,children:[{level:2,title:"stubs",hash:"stubs"},{level:2,title:"data",hash:"data"},{level:2,title:"methods",hash:"methods"}]})}}o={},(e="components")in(t=c)?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o}.call(this,a(2))},98:function(n,s){n.exports=' <div class="content markdown-content"><div class="markdown"><h1 id="%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9">配置选项</h1> <hr/> <p>San Test Utils 包含了一个定义其选项的配置对象。</p> <h2 id="stubs">stubs</h2> <ul> <li>类型：<code>{[name: string]: Component | boolean | string}</code></li> <li>默认值：<code>{}</code></li> </ul> <p>存储在 <code>config.stubs</code> 中的存根会被默认使用。</p> <p>用到的组件存根。它们会被传入挂载选项的 <code>stubs</code> 覆写。</p> <p>示例</p> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>config<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'san-test-utils\'</span><span class="token punctuation">;</span>\n\nconfig<span class="token punctuation">.</span>stubs<span class="token punctuation">[</span><span class="token string">\'my-component\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'&lt;div />\'</span><span class="token punctuation">;</span></code></pre> <h2 id="data">data</h2> <ul> <li>类型：<code>Object</code></li> <li>默认值：<code>{}</code></li> </ul> <p>默认使用传递给 config.data 的值，类似 stubs。传递给挂载选项中 data 对象的任何值都会优先于 config.data 中的同名声明。</p> <p>示例</p> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>config<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'san-test-utils\'</span><span class="token punctuation">;</span>\n\nconfig<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">\'state\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="methods">methods</h2> <ul> <li>类型：<code>{[name: string]: Function}</code></li> <li>默认值：<code>{}</code></li> </ul> <p>你可以使用 <code>config</code> 对象配置默认的方法。它可以用于为组件注入方法的插件。你可以通过在挂载选项中传入 <code>methods</code> 来覆写 <code>config</code> 中的方法集合。</p> <p>示例</p> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>config<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'san-test-utils\'</span><span class="token punctuation">;</span>\n\nconfig<span class="token punctuation">.</span>methods<span class="token punctuation">[</span><span class="token string">\'getData\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> </div></div> '}});