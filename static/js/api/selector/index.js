!function(n){function s(s){for(var t,p,c=s[0],l=s[1],r=s[2],i=0,d=[];i<c.length;i++)p=c[i],Object.prototype.hasOwnProperty.call(o,p)&&o[p]&&d.push(o[p][0]),o[p]=0;for(t in l)Object.prototype.hasOwnProperty.call(l,t)&&(n[t]=l[t]);for(u&&u(s);d.length;)d.shift()();return e.push.apply(e,r||[]),a()}function a(){for(var n,s=0;s<e.length;s++){for(var a=e[s],t=!0,c=1;c<a.length;c++){var l=a[c];0!==o[l]&&(t=!1)}t&&(e.splice(s--,1),n=p(p.s=a[0]))}return n}var t={},o={6:0,66:0},e=[];function p(s){if(t[s])return t[s].exports;var a=t[s]={i:s,l:!1,exports:{}};return n[s].call(a.exports,a,a.exports,p),a.l=!0,a.exports}p.e=function(){return Promise.resolve()},p.m=n,p.c=t,p.d=function(n,s,a){p.o(n,s)||Object.defineProperty(n,s,{enumerable:!0,get:a})},p.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},p.t=function(n,s){if(1&s&&(n=p(n)),8&s)return n;if(4&s&&"object"==typeof n&&n&&n.__esModule)return n;var a=Object.create(null);if(p.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:n}),2&s&&"string"!=typeof n)for(var t in n)p.d(a,t,function(s){return n[s]}.bind(null,t));return a},p.n=function(n){var s=n&&n.__esModule?function(){return n.default}:function(){return n};return p.d(s,"a",s),s},p.o=function(n,s){return Object.prototype.hasOwnProperty.call(n,s)},p.p="/san-test-utils/";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=s,c=c.slice();for(var r=0;r<c.length;r++)s(c[r]);var u=l;e.push([155,0]),a()}({155:function(n,s,a){var t=a(1),o=a(96),e=a(24).default;n.exports=a(24),n.exports.default=t(e,o,[])},24:function(n,s,a){"use strict";a.r(s),function(n){a.d(s,"default",(function(){return c}));var t,o,e,p=a(0);class c extends p.a{inited(){n.hub&&n.hub.fire&&n.hub.fire("changed",{level:0,children:[{level:3,title:"CSS 选择器",hash:"css-%E9%80%89%E6%8B%A9%E5%99%A8"},{level:3,title:"San 组件",hash:"san-%E7%BB%84%E4%BB%B6"},{level:3,title:"查找选项对象",hash:"%E6%9F%A5%E6%89%BE%E9%80%89%E9%A1%B9%E5%AF%B9%E8%B1%A1"}]})}}e={},(o="components")in(t=c)?Object.defineProperty(t,o,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[o]=e}.call(this,a(2))},96:function(n,s){n.exports=' <div class="content markdown-content"><div class="markdown"><h1 id="%E9%80%89%E6%8B%A9%E5%99%A8">选择器</h1> <hr/> <p>很多方法的<strong>参数</strong>中都包含选择器。一个选择器可以是一个 CSS 选择器、一个 San 组件或是一个查找选项对象。</p> <h3 id="css-%E9%80%89%E6%8B%A9%E5%99%A8">CSS 选择器</h3> <p>挂载处理任何有效的 CSS 选择器：</p> <ul> <li>标签选择器 (<code>div</code>、<code>foo</code>、<code>bar</code>)</li> <li>类选择器 (<code>.foo</code>、<code>.bar</code>)</li> <li>特性选择器 (<code>[foo]</code>、<code>[foo=&quot;bar&quot;]</code>)</li> <li>id 选择器 (<code>#foo</code>、<code>#bar</code>)</li> <li>伪选择器 (<code>div:first-of-type</code>)</li> </ul> <p>你也可以结合使用：</p> <ul> <li>直接从属结合 (<code>div &gt; #bar &gt; .foo</code>)</li> <li>一般从属结合 (<code>div #bar .foo</code>)</li> <li>近邻兄弟选择器 (<code>div + .foo</code>)</li> <li>一般兄弟选择器 (<code>div ~ .foo</code>)</li> </ul> <h3 id="san-%E7%BB%84%E4%BB%B6">San 组件</h3> <p>San 组件也是有效的选择器。</p> <pre class="language-js"><code class="language-js"><span class="token comment">// Foo</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> san<span class="token punctuation">.</span><span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'fooComponent\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">\'&lt;div />\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>shallowAttach<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'san-test-utils\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">\'./foo\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallowAttach</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <blockquote> <p>注意：使用组件作为选择器<strong>参数</strong>时该组件必须有且唯一的name值。</p> </blockquote> <h3 id="%E6%9F%A5%E6%89%BE%E9%80%89%E9%A1%B9%E5%AF%B9%E8%B1%A1">查找选项对象</h3> <h4 id="ref">Ref</h4> <p>San Test Utils 允许通过一个查找选项对象在组件包裹器上根据 s-ref 选择元素。</p> <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> buttonWrapper <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token string">\'myButton\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbuttonWrapper<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> </div></div> '}});