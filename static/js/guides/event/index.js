!function(n){function s(s){for(var t,c,e=s[0],u=s[1],l=s[2],i=0,r=[];i<e.length;i++)c=e[i],Object.prototype.hasOwnProperty.call(p,c)&&p[c]&&r.push(p[c][0]),p[c]=0;for(t in u)Object.prototype.hasOwnProperty.call(u,t)&&(n[t]=u[t]);for(k&&k(s);r.length;)r.shift()();return o.push.apply(o,l||[]),a()}function a(){for(var n,s=0;s<o.length;s++){for(var a=o[s],t=!0,e=1;e<a.length;e++){var u=a[e];0!==p[u]&&(t=!1)}t&&(o.splice(s--,1),n=c(c.s=a[0]))}return n}var t={},p={17:0,76:0},o=[];function c(s){if(t[s])return t[s].exports;var a=t[s]={i:s,l:!1,exports:{}};return n[s].call(a.exports,a,a.exports,c),a.l=!0,a.exports}c.e=function(){return Promise.resolve()},c.m=n,c.c=t,c.d=function(n,s,a){c.o(n,s)||Object.defineProperty(n,s,{enumerable:!0,get:a})},c.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},c.t=function(n,s){if(1&s&&(n=c(n)),8&s)return n;if(4&s&&"object"==typeof n&&n&&n.__esModule)return n;var a=Object.create(null);if(c.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:n}),2&s&&"string"!=typeof n)for(var t in n)c.d(a,t,function(s){return n[s]}.bind(null,t));return a},c.n=function(n){var s=n&&n.__esModule?function(){return n.default}:function(){return n};return c.d(s,"a",s),s},c.o=function(n,s){return Object.prototype.hasOwnProperty.call(n,s)},c.p="/san-test-utils/";var e=window.webpackJsonp=window.webpackJsonp||[],u=e.push.bind(e);e.push=s,e=e.slice();for(var l=0;l<e.length;l++)s(e[l]);var k=u;o.push([145,0]),a()}({14:function(n,s,a){"use strict";a.r(s),function(n){a.d(s,"default",(function(){return e}));var t,p,o,c=a(0);class e extends c.a{inited(){n.hub&&n.hub.fire&&n.hub.fire("changed",{level:0,children:[{level:3,title:"触发事件",hash:"%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6"},{level:3,title:"选项",hash:"%E9%80%89%E9%A1%B9"},{level:3,title:"鼠标点击示例",hash:"%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%A4%BA%E4%BE%8B"},{level:3,title:"键盘示例",hash:"%E9%94%AE%E7%9B%98%E7%A4%BA%E4%BE%8B"}]})}}o={},(p="components")in(t=e)?Object.defineProperty(t,p,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[p]=o}.call(this,a(2))},145:function(n,s,a){var t=a(1),p=a(86),o=a(14).default;n.exports=a(14),n.exports.default=t(o,p,[])},86:function(n,s){n.exports=' <div class="content markdown-content"><div class="markdown"><h1 id="%E6%B5%8B%E8%AF%95%E9%94%AE%E7%9B%98%E3%80%81%E9%BC%A0%E6%A0%87%E7%AD%89%E5%85%B6%E5%AE%83-dom-%E4%BA%8B%E4%BB%B6">测试键盘、鼠标等其它 DOM 事件</h1> <h3 id="%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6">触发事件</h3> <p><code>Wrapper</code> 封装了一个 <code>trigger</code> 方法。它可以用来触发 DOM 事件。</p> <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">attach</span><span class="token punctuation">(</span>myButton<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nwrapper<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>你应该注意到了，<code>find</code> 方法也会返回一个 <code>Wrapper</code>。假设 <code>myComponent</code> 包含一个按钮，下面的代码会点击这个按钮。</p> <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">attach</span><span class="token punctuation">(</span>myComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nwrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="%E9%80%89%E9%A1%B9">选项</h3> <p>其 <code>trigger</code> 方法接受一个可选的 <code>options</code> 对象。这个 <code>options</code> 对象里的属性会被添加到事件中。</p> <p>注意 <code>target</code> 对象不能被添加到 <code>options</code> 对象中。</p> <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">attach</span><span class="token punctuation">(</span>myButton<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nwrapper<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">button</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%A4%BA%E4%BE%8B">鼠标点击示例</h3> <p>待测试的组件</p> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> san <span class="token keyword">from</span> <span class="token string">\'san\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> san<span class="token punctuation">.</span><span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'YesNoComponent\'</span><span class="token punctuation">,</span>\n    <span class="token function">callYes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callMe</span><span class="token punctuation">(</span><span class="token string">\'yes\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">callNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callMe</span><span class="token punctuation">(</span><span class="token string">\'no\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n        &lt;button class="yes" on-click="callYes">Yes&lt;/button>\n        &lt;button class="no" on-click="callNo">No&lt;/button>\n    &lt;/div></span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p>测试</p> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> yesNoComponent <span class="token keyword">from</span> <span class="token string">\'./yesNoComponent\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>attach<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'san-test-utils\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> sinon <span class="token keyword">from</span> <span class="token string">\'sinon\'</span><span class="token punctuation">;</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'Click event\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'Click on yes button calls our method with argument "yes"\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> spy <span class="token operator">=</span> sinon<span class="token punctuation">.</span><span class="token function">spy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">attach</span><span class="token punctuation">(</span>yesNoComponent<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token literal-property property">callMe</span><span class="token operator">:</span> spy\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">\'button.yes\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        spy<span class="token punctuation">.</span>should<span class="token punctuation">.</span>have<span class="token punctuation">.</span>been<span class="token punctuation">.</span><span class="token function">calledWith</span><span class="token punctuation">(</span><span class="token string">\'yes\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="%E9%94%AE%E7%9B%98%E7%A4%BA%E4%BE%8B">键盘示例</h3> <p>待测试的组件</p> <p>这个组件允许使用不同的按键将数量递增/递减。</p> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> san <span class="token keyword">from</span> <span class="token string">\'san\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token constant">KEY_DOWN</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">KEY_UP</span> <span class="token operator">=</span> <span class="token number">38</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">ESCAPE</span> <span class="token operator">=</span> <span class="token number">27</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> san<span class="token punctuation">.</span><span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">0</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">inited</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">\'quantity\'</span><span class="token punctuation">,</span> <span class="token parameter">val</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token string">\'input\'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> quantity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'quantity\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">\'quantity\'</span><span class="token punctuation">,</span> <span class="token operator">++</span>quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> quantity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'quantity\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">\'quantity\'</span><span class="token punctuation">,</span> <span class="token operator">--</span>quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">\'quantity\'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">onKeydown</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token constant">ESCAPE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token constant">KEY_DOWN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token constant">KEY_UP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">\'a\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">\'quantity\'</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">\'&lt;input type="text" on-keydown="onKeydown" value="{=quantity=}" />\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>测试用例</p> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> quantityComponent <span class="token keyword">from</span> <span class="token string">\'./quantityComponent\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>attach<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'san-test-utils\'</span><span class="token punctuation">;</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'Key event tests\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'Quantity is zero by default\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">attach</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'quantity\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'Up arrow key increments quantity by 1\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">attach</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        wrapper<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">\'keydown-up\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'quantity\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'Down arrow key decrements quantity by 1\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">attach</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">\'quantity\'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        wrapper<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">\'keydown-down\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'quantity\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'Escape sets quantity to 0\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">attach</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">\'quantity\'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        wrapper<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">\'keydown-esc\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'quantity\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'Magic character "a" sets quantity to 13\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">attach</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        wrapper<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">\'keydown\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">\'a\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'quantity\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p>按键名 keydown-up 会被翻译成一个 keyCode。我们目前支持的按键名有：</p> <table> <thead> <tr> <th>key name</th> <th>key code</th> </tr> </thead> <tbody> <tr> <td>enter</td> <td>13</td> </tr> <tr> <td>esc</td> <td>27</td> </tr> <tr> <td>tab</td> <td>9</td> </tr> <tr> <td>space</td> <td>32</td> </tr> <tr> <td>delete</td> <td>46</td> </tr> <tr> <td>backspace</td> <td>8</td> </tr> <tr> <td>insert</td> <td>45</td> </tr> <tr> <td>up</td> <td>38</td> </tr> <tr> <td>down</td> <td>40</td> </tr> <tr> <td>left</td> <td>37</td> </tr> <tr> <td>right</td> <td>39</td> </tr> <tr> <td>end</td> <td>35</td> </tr> <tr> <td>home</td> <td>36</td> </tr> <tr> <td>pageup</td> <td>33</td> </tr> <tr> <td>pagedown</td> <td>34</td> </tr> </tbody> </table> </div></div> '}});