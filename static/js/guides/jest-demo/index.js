!function(n){function s(s){for(var t,o,c=s[0],r=s[1],l=s[2],i=0,k=[];i<c.length;i++)o=c[i],Object.prototype.hasOwnProperty.call(p,o)&&p[o]&&k.push(p[o][0]),p[o]=0;for(t in r)Object.prototype.hasOwnProperty.call(r,t)&&(n[t]=r[t]);for(u&&u(s);k.length;)k.shift()();return e.push.apply(e,l||[]),a()}function a(){for(var n,s=0;s<e.length;s++){for(var a=e[s],t=!0,c=1;c<a.length;c++){var r=a[c];0!==p[r]&&(t=!1)}t&&(e.splice(s--,1),n=o(o.s=a[0]))}return n}var t={},p={18:0,77:0},e=[];function o(s){if(t[s])return t[s].exports;var a=t[s]={i:s,l:!1,exports:{}};return n[s].call(a.exports,a,a.exports,o),a.l=!0,a.exports}o.e=function(){return Promise.resolve()},o.m=n,o.c=t,o.d=function(n,s,a){o.o(n,s)||Object.defineProperty(n,s,{enumerable:!0,get:a})},o.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},o.t=function(n,s){if(1&s&&(n=o(n)),8&s)return n;if(4&s&&"object"==typeof n&&n&&n.__esModule)return n;var a=Object.create(null);if(o.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:n}),2&s&&"string"!=typeof n)for(var t in n)o.d(a,t,function(s){return n[s]}.bind(null,t));return a},o.n=function(n){var s=n&&n.__esModule?function(){return n.default}:function(){return n};return o.d(s,"a",s),s},o.o=function(n,s){return Object.prototype.hasOwnProperty.call(n,s)},o.p="/san-test-utils/";var c=window.webpackJsonp=window.webpackJsonp||[],r=c.push.bind(c);c.push=s,c=c.slice();for(var l=0;l<c.length;l++)s(c[l]);var u=r;e.push([147,0]),a()}({147:function(n,s,a){var t=a(1),p=a(88),e=a(16).default;n.exports=a(16),n.exports.default=t(e,p,[])},16:function(n,s,a){"use strict";a.r(s),function(n){a.d(s,"default",(function(){return c}));var t,p,e,o=a(0);class c extends o.a{inited(){n.hub&&n.hub.fire&&n.hub.fire("changed",{level:0,children:[{level:3,title:"安装 Jest",hash:"%E5%AE%89%E8%A3%85-jest"},{level:3,title:"配置 Jest",hash:"%E9%85%8D%E7%BD%AE-jest"},{level:3,title:"处理 webpack 别名",hash:"%E5%A4%84%E7%90%86-webpack-%E5%88%AB%E5%90%8D"},{level:3,title:"为 Jest 配置 Babel",hash:"%E4%B8%BA-jest-%E9%85%8D%E7%BD%AE-babel"},{level:3,title:"测试 San 单文件组件",hash:"%E6%B5%8B%E8%AF%95-san-%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6"},{level:3,title:"放置测试文件",hash:"%E6%94%BE%E7%BD%AE%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6"},{level:3,title:"测试覆盖率",hash:"%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87"},{level:3,title:"测试规范示例",hash:"%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E7%A4%BA%E4%BE%8B"},{level:3,title:"快照测试",hash:"%E5%BF%AB%E7%85%A7%E6%B5%8B%E8%AF%95"},{level:3,title:"相关资料",hash:"%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99"}]})}}e={},(p="components")in(t=c)?Object.defineProperty(t,p,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[p]=e}.call(this,a(2))},88:function(n,s){n.exports=' <div class="content markdown-content"><div class="markdown"><h1 id="%E7%94%A8-jest-%E6%B5%8B%E8%AF%95%E7%BB%84%E4%BB%B6">用 Jest 测试组件</h1> <blockquote> <p>我们在 <a href="https://github.com/ecomfe/san-test-utils/tree/master/docs/demo/jest" target="_blank">github</a> 上放有一个关于这些设置的示例工程。</p> </blockquote> <p>Jest 是一个由 Facebook 开发的测试运行器，致力于提供一个“bettery-included”单元测试解决方案。你可以在其<a href="https://jestjs.io/" target="_blank">官方文档</a>学习到更多 Jest 的知识。</p> <h3 id="%E5%AE%89%E8%A3%85-jest">安装 Jest</h3> <p>我们假定你在一开始已经安装并配置好了 webpack、san-loader 和 Babel。</p> <p>我们要做的第一件事就是安装 <code>Jest</code> 和 <code>San Test Utils</code>：</p> <pre class="language-js"><code class="language-js">$ npm install jest san<span class="token operator">-</span>test<span class="token operator">-</span>utils <span class="token operator">--</span>save<span class="token operator">-</span>dev</code></pre> <p>然后我们需要在 <code>package.json</code> 中定义一个单元测试的脚本。</p> <pre class="language-js"><code class="language-js"><span class="token comment">// package.json</span>\n<span class="token punctuation">{</span>\n    <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"jest"</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h3 id="%E9%85%8D%E7%BD%AE-jest">配置 Jest</h3> <p>接下来在 <code>package.json</code> 中创建一个 <code>jest</code> 块：</p> <pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token string-property property">"jest"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">"moduleFileExtensions"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token string">"js"</span><span class="token punctuation">,</span>\n            <span class="token string">"json"</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h3 id="%E5%A4%84%E7%90%86-webpack-%E5%88%AB%E5%90%8D">处理 webpack 别名</h3> <p>如果你在 webpack 中配置了别名解析，比如把 <code>@</code> 设置为 <code>/src</code> 的别名，那么你也需要用 <code>moduleNameMapper</code> 选项为 Jest 增加一个匹配配置：</p> <pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token string-property property">"jest"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n        <span class="token comment">// 支持源代码中相同的 `@` -> `src` 别名</span>\n        <span class="token string-property property">"moduleNameMapper"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token string-property property">"^@/(.*)$"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/src/$1"</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h3 id="%E4%B8%BA-jest-%E9%85%8D%E7%BD%AE-babel">为 Jest 配置 Babel</h3> <p>尽管最新版本的 Node 已经支持绝大多数的 ES2015 特性，你可能仍然想要在你的测试中使用 ES modules 语法和 stage-x 的特性。为此我们需要安装 <code>babel-jest</code>：</p> <pre class="language-js"><code class="language-js">$ npm install babel<span class="token operator">-</span>jest <span class="token operator">--</span>save<span class="token operator">-</span>dev</code></pre> <p>接下来，我们需要在 <code>package.json</code> 的 <code>jest.transform</code> 里添加一个入口，来告诉 Jest 用 <code>babel-jest</code> 处理 JavaScript 测试文件：</p> <pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token string-property property">"jest"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n        <span class="token string-property property">"transform"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token comment">// ...</span>\n            <span class="token comment">// 用 `babel-jest` 处理 js</span>\n            <span class="token string-property property">"^.+\\\\.js$"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/node_modules/babel-jest"</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p>我们假设 webpack 使用了 <code>babel-preset-env</code>，这时默认的 Babel 配置会关闭 ES modules 的转译，因为 webpack 已经可以处理 ES modules 了。然而，我们还是需要为我们的测试而开启它，因为 Jest 的测试用例会直接运行在 Node 上。</p> <p>同样的，我们可以告诉 <code>babel-preset-env</code> 面向我们使用的 Node 版本。这样做会跳过转译不必要的特性使得测试启动更快。</p> <p>为了仅在测试时应用这些选项，可以把它们放到一个独立的 <code>env.test</code> 配置项中 (这会被 <code>babel-jest</code> 自动获取)。</p> <p><code>.babelrc</code> 文件示例：</p> <pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n    <span class="token string-property property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string-property property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token string-property property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">"node"</span><span class="token operator">:</span> <span class="token string">"current"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h3 id="%E6%B5%8B%E8%AF%95-san-%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6">测试 San 单文件组件</h3> <p>如果需要测试 .san 的单文件组件，我们需要安装 <code>san-jest</code> 转换器。</p> <pre class="language-js"><code class="language-js">$ npm install san<span class="token operator">-</span>jest <span class="token operator">--</span>save<span class="token operator">-</span>dev</code></pre> <p>在 package.json 的 <code>jest</code> 块中修改 <code>transform</code> 的配置:</p> <pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token string-property property">"jest"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">"testEnvironment"</span><span class="token operator">:</span> <span class="token string">"jsdom"</span><span class="token punctuation">,</span>\n        <span class="token string-property property">"moduleFileExtensions"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token string">"js"</span><span class="token punctuation">,</span>\n            <span class="token string">"ts"</span><span class="token punctuation">,</span>\n            <span class="token string">"json"</span><span class="token punctuation">,</span>\n            <span class="token string">"san"</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token string-property property">"transform"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">"^.+\\\\.js$"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/node_modules/babel-jest"</span><span class="token punctuation">,</span>\n        <span class="token string-property property">"^.+\\\\.san$"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/node_modules/san-jest"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token string-property property">"globals"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token string-property property">"san-jest"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token string-property property">"templateCompileOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token comment">// 对全部 .san 文件生效</span>\n                    <span class="token string-property property">"compileANode"</span><span class="token operator">:</span> <span class="token string">"aNode"</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token string-property property">"styleCompileOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token string-property property">"scriptCompileOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <blockquote> <p>详细配置请阅读 <a href="https://github.com/wanwu/san-jest" target="_blank">san-jest</a> 文档。</p> </blockquote> <h3 id="%E6%94%BE%E7%BD%AE%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6">放置测试文件</h3> <p>默认情况下，Jest 将会递归的找到整个工程里所有 <code>.spec.js</code> 或 <code>.test.js</code> 扩展名的文件。如果这不符合你的需求，你也可以在 <code>package.json</code> 里的配置段落中<a href="https://jestjs.io/docs/zh-Hans/configuration#testregex-string-array-string" target="_blank">改变它的 <code>testRegex</code></a>。</p> <p>Jest 推荐你在被测试代码的所在目录下创建一个 <code>__tests__</code> 目录，但你也可以为你的测试文件随意设计自己习惯的文件结构。不过要当心 Jest 会为快照测试在临近测试文件的地方创建一个 <code>__snapshots__</code> 目录。</p> <h3 id="%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87">测试覆盖率</h3> <p>Jest 可以被用来生成多种格式的测试覆盖率报告。以下是一个简单的起步的例子：</p> <p>扩展你的 jest 配置 (通常在 <code>package.json</code> 或 <code>jest.config.js</code> 中) 的 <code>collectCoverage</code> 选项，然后添加 <code>collectCoverageFrom</code> 数组来定义需要收集测试覆盖率信息的文件。</p> <pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n    <span class="token string-property property">"jest"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n        <span class="token string-property property">"collectCoverage"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token string-property property">"collectCoverageFrom"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"**/*.{js}"</span><span class="token punctuation">,</span> <span class="token string">"!**/node_modules/**"</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p>这样就会开启<a href="https://jestjs.io/docs/zh-Hans/configuration#coveragereporters-array-string" target="_blank">默认格式的测试覆盖率报告</a>。你可以通过 <code>coverageReporters</code> 选项来定制它们。</p> <pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n    <span class="token string-property property">"jest"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n        <span class="token string-property property">"coverageReporters"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">"text-summary"</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p>更多文档内容请移步至 <a href="https://jestjs.io/docs/zh-Hans/configuration#collectcoverage-boolean" target="_blank">Jest 配置文档</a>，在那里你可以找到覆盖率阀值、目标输出目录等选项。</p> <h3 id="%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E7%A4%BA%E4%BE%8B">测试规范示例</h3> <p>如果你已经熟悉了 Jasmine，你应该很适应 Jest 的<a href="https://jestjs.io/docs/zh-Hans/expect" target="_blank">断言 API</a>：</p> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>attach<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'san-test-utils\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> component <span class="token keyword">from</span> <span class="token string">\'./component\'</span><span class="token punctuation">;</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'component\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'is a San instance\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">attach</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">isSanInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="%E5%BF%AB%E7%85%A7%E6%B5%8B%E8%AF%95">快照测试</h3> <p>当你用 San Test Utils 挂载一个组件时，你可以访问到 HTML 根元素。这可以保存为一个快照为 <a href="https://jestjs.io/docs/zh-Hans/snapshot-testing" target="_blank">Jest 快照测试</a>所用。</p> <pre class="language-js"><code class="language-js"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'renders correctly\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">attach</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99">相关资料</h3> <ul> <li><a href="https://github.com/ecomfe/san-test-utils/tree/master/docs/demo/jest" target="_blank">该设置的示例工程</a></li> <li><a href="https://jestjs.io/" target="_blank">Jest</a></li> <li><a href="https://github.com/babel/babel-preset-env" target="_blank">Babel preset env</a></li> </ul> </div></div> '}});